<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore">

            <b:panel title="First steps with AngularFaces" look="primary">
                <h2>Requirements</h2>
                <p>You find the requirements <a href="../../version2.1/tutorial/step_99/requirements.jsf">in a dedicated chapter</a>. Cutting a long story short:
                You need Java 6 and JSF 2.2.</p>

        <h2>Template projects</h2>
        <p>
            Am einfachsten ist es, mit einer der Projektschablonen zu beginnnen. Auf  <a target="#" href="https://github.com/stephanrauh/BootsFaces-Examples/tree/master/PanelGrid">dem
                AngularFaces GitHub Repositoy</a> liegt ein einfaches Demo-Projekt, das AngularFaces mit BootsFaces und PrimeFaces kombiniert.
                In den meisten Fällen ist das eine gute Basis:</p>
        <ul>
            <li>AngularFaces vereinfacht die JSF-Programmierung und ermöglicht es Ihnen, AngularJS in JSF-Anwendungen zu verwenden.</li>
            <li>BootsFaces bringt das elegante Layout von Twitter Bootstrap in die JSF-Welt. Natürlich brauchen Sie BootsFaces nicht,
            um Bootstrap zu verwenden. BootsFaces macht aber vieles einfacher und liefert eine Handvoll Komponenten, die für 
            Bootsfaces optimiert sind.</li>
            <li>Für alles andere empfehle ich PrimeFaces. Sowohl AngularFaces als auch BootsFaces sind dafür gedacht, mit PrimeFaces (ab Version 5.0) verwendet zu werden.
            Sie können also ruhig alle drei Frameworks zusammen verwenden. Die Gefahr, dass Sie in wechselseitige Inkompatiblitäten laufen, ist gering.</li>
            <li>OmniFaces passt ebenfalls gut zu AngularFaces und BootsFaces, auch wenn es nicht in der Projektschablone gehört. Insbesondere lohnt es sich, den <code>CombinedResourceHandler</code>
            zu verwenden. AngularFaces und BootsFaces laden viele kleine Javascript- und CSS-Dateien. Der <code>CombinedResourceHandler</code> beschleunigt das Laden der Seite
            erheblich. Zumindest heute (22.03.2015) noch: falls Sie SPDY oder HTTP/2 einsetzen, bremst der <code>CombinedResourceHandler</code> ihre Seite möglicherweise aus.</li>
        </ul>
        <p>Falls Sie dennoch auf BootsFaces oder PrimeFaces verzichten wollen, entfernen Sie einfach die entsprechenden Einträge in der <code>pom.xml</code>.
        </p>
        <p>
            Ein weiteres interessantes Demo ist das <a target="#" href="http://angularfaces.net/showcase2.1/carshop/index.jsf">Autohändler-Demo</a>, dessen Quelltexte 
            auf <a target="#"
                href="https://github.com/stephanrauh/AngularFaces/tree/master/AngularFaces_2.0/AngularFaces-2.0-examples">GitHub</a> liegen.
            Ich verwende dieses Projekt oft zum Experimentieren. Erwarten Sie als bitte keinen vorbildlichen Quelltext. Dafür finden Sie dort
            aber Beispiele, wie Sie eine PrimeFaces-Datatable oder die AngularJS-Komponente ngTable in AngularFaces verwenden können,
            oder wie Sie Daten aus <a href="../../javascript/afSendNGSyncToServer/index.xhtml">Javascript heraus zum Server</a> schicken können.  
        </p>
        <p>
            Für etwas verspieltere Naturen gibt es noch das <a target="#" href="https://github.com/stephanrauh/AngularTetrisOnBootsFaces">Tetris Demoprojekt</a>.
            Es handelt sich dabei um eine etwas weitergehende Demostration der Möglichkeiten von AngularFaces. Es enthält eine Menge Javascript-Code,
            aber auch einen Datenbankzugriff auf der Serverseite. 
            Viel Spaß mit der Live-Demo auf<a target="#" href="http://angularfaces.net/tetris/">http://angularfaces.net/tetris/</a>!
        </p>
        <h2>Los geht's!</h2>
        <p>Sie haben die Wahl, eine fertige AngularFaces-Version von MavenCentral oder jCenter zu beziehen, oder sich die aktuelle Entwicklerversion
        aus den GitHub-Quelltexten selber zu bauen. Mittlerweile ist AngularFaces so ausgereift, dass ich immer die erste Variante empfehle.</p>
        <p>In jedem Fall müssen Sie in der <code>web.xml</code> noch einen Kontextparameter hinzufügen, damit AngularFaces läuft. 
        Wenn Sie den Kontextparameter vergessen, erinnert AngularFaces Sie beim Hochfahren des Servers daran.</p>
        <b:tabView>
        <b:tab title="web.xml">
        <b:well>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;context-param>
    &lt;param-name>javax.faces.FACELETS_DECORATORS&lt;/param-name>
    &lt;param-value>
        de.beyondjava.angularFaces.core.tagTransformer.AngularTagDecorator
    &lt;/param-value>
&lt;/context-param>
]]></script>
        </b:well>
        </b:tab>
        <b:tab title="pom.xml">
        <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;dependencies>
  &lt;dependency>
    &lt;groupId>de.beyondjava&lt;/groupId>
    &lt;artifactId>angularFaces-core&lt;/artifactId>
    &lt;version>2.1.3&lt;/version>
  &lt;/dependency>
  &lt;dependency>
    &lt;groupId>com.sun.faces&lt;/groupId>
    &lt;artifactId>jsf-api&lt;/artifactId>
    &lt;version>2.2.10&lt;/version>
    &lt;scope>compile&lt;/scope>
  &lt;/dependency>
  &lt;dependency>
    &lt;groupId>com.sun.faces&lt;/groupId>
    &lt;artifactId>jsf-impl&lt;/artifactId>
    &lt;version>2.2.10&lt;/version>
    &lt;scope>runtime&lt;/scope>
  &lt;/dependency>
&lt;/dependencies>
]]></script>
        </b:well>
        </b:tab>
        <b:tab title=".gradle">
        <b:well>
                <script type="syntaxhighlighter" class="brush: groovy; toolbar: false;first-line: 0">
<![CDATA[
        compile 'de.beyondjava:angularFaces-core:2.1.+'
        compile 'com.sun.faces:jsf-api:2.2.+'
        runtime 'com.sun.faces:jsf-impl:2.2.+'
]]></script>
        </b:well>
        </b:tab>
        </b:tabView>

                
       <h2>Your first AngularFaces program</h2>
        <b:row>
        <b:column span="8">      
        <p>Users of Maven and Gradle are already familiar with Maven's default project layout.</p>

        <p>Please create these folders:</p>
        <ul>
        <li><code>src/main/java</code> Put your Java source code files here.</li>
        <li><code>src/main/resources</code> Files in this folder aren't compiled, but they are included in the class path nonetheless. For instance, the
        language files for the automatic translation feature of AngularFaces belong here.</li>  
        <li><code>src/main/webapps</code>This folder contains the XHTML files and the AngularJS controllers.</li>
        </ul>
        </b:column>
        <b:column span="4">
                       <img src="folderLayout.png" />
        </b:column>
        </b:row>
        
        <p>Our example uses these files:</p>
                
      <b:tabView contentStyle="min-height:420px">
        <b:tab title="index.jsf">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:b="http://bootsfaces.net/ui" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:prime="http://primefaces.org/ui">
<body>
   <container> 
      <panel title="Contact information" look="info"> 
        <h:form>
          <panelGrid colSpans="2,3,7" size="xs"> 
             <prime:inputText value="#{person.firstName}" /> 
             <prime:inputText value="#{person.lastName}" /> 
             <prime:calendar value="#{person.birthdate}" />
          </panelGrid>
        </h:form>
      </panel>
    </container>
  </body>
</html>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="JSF-Bean">
          <b:well>
                <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 0">
                    <![CDATA[
package de.beyondjava.bootsfaces.examples;

import java.util.Date;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

@ViewScoped
@ManagedBean
public class Person {
    
    private String firstName;
    private String lastName;
    private Date birthdate;

    // Getters and setter omitted
    // for the sake of brevity
}
                ]]></script>     
                <p>If you use CDI, please replace @ManagedBean by @Named and make sure you import the new Viewscope <code>javax.faces.view</code>.</p>    
          </b:well>
        </b:tab>
        <b:tab title="main.js (AngularJS controller)">
          <b:well>
            <p>This simple example doesn't need an AngularJS-Controller. But if it had one, it'd look like this:</p>
                <script type="syntaxhighlighter" class="brush: js; toolbar: false;first-line: 0">
                    <![CDATA[
angular.module("AngularTetris", [ "angularfaces", "smart-table" ])
.controller('AngularTetrisController', ['$scope', function($scope) {
   initJSFScope($scope);
   // put your application logic here
}]);   
                ]]></script>            
          </b:well>
        </b:tab>
        <b:tab title="web.xml">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="http://java.sun.com/xml/ns/javaee"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
    id="WebApp_ID" 
    version="3.0">

    <context-param>
        <param-name>javax.faces.FACELETS_DECORATORS</param-name>
        <param-value>
            de.beyondjava.angularFaces.core.tagTransformer.AngularTagDecorator
        </param-value>
    </context-param>
   <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>bootstrap</param-value>
    </context-param>

    <context-param>
        <param-name>BootsFaces_USETHEME</param-name>
        <param-value>true</param-value>
    </context-param>
    <welcome-file-list>
        <welcome-file>index.jsf</welcome-file>
    </welcome-file-list>
</web-app>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="faces-config.xml">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<faces-config
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"
    version="2.2">
</faces-config>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="preview">
        <img src="preview.png" />
        </b:tab>
        <b:tab title="live demo">
        <iframe style="width:500px;height:400px;" src="http://angularfaces.net/BootsFacesPanelGrid/"></iframe>
        </b:tab>
        <b:tab title="pom.xml" contentStyle="height:700px">
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<repositories>
    <repository>
        <id>prime-repo</id>
        <name>PrimeFaces Maven Repository</name>
        <url>http://repository.primefaces.org</url>
        <layout>default</layout>
    </repository>
</repositories>
<dependencies>
    <dependency>
        <groupId>net.bootsfaces</groupId>
        <artifactId>bootsfaces</artifactId>
        <version>0.6.5</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>org.primefaces</groupId>
        <artifactId>primefaces</artifactId>
        <version>5.1</version>
        <scope>compile</scope>
    </dependency>
   <dependency>
        <groupId>org.primefaces.themes</groupId>
        <artifactId>bootstrap</artifactId>
        <version>1.0.10</version>
        <scope>runtime</scope>
    </dependency>
   <dependency>
        <groupId>de.beyondjava</groupId>
        <artifactId>angularFaces-core</artifactId>
        <version>2.1.2</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.2.10</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-impl</artifactId>
        <version>2.2.10</version>
        <scope>runtime</scope>
    </dependency>
</dependencies>
               ]]></script>
        </b:tab>
        </b:tabView>
        <h2>Wrapping it up</h2>
        <p>That's it! Your first AngularFaces application is up and running. Granted, it doesn't use AngularJS yet, but it demonstrates several other interesting features of AngularFaces:</p>
        
        <ul>
            <li>The program uses both BootsFaces and PrimeFaces along with AngularFaces. That's the reason why the <code>pom.xml</code> is more verbose than the minimal <code>pom.xml</code> given above.</li>
            
            <li>Labels and error messages are - if you wish so - generated automatically. So the form concentrates on the really interesting information: the three input fields.</li>
            <li>In most cases you can omit the prefixes <code>h:</code> und <code>b:</code>. (Too bad your IDE doesn't know about this...)</li>
        </ul>
        <p>Now it's up to you. Experiment with the program, browse through the other chapters of the tutorial, and most of all:</p>
        <h2>Enjoy!</h2>
        
        <br />
        <br />
        <br />
        <br />
        <br />
                
          <br />
                <br />
            </b:panel>
</ui:fragment>
