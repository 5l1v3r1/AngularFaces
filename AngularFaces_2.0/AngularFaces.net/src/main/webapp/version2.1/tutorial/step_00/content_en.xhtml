<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore">

            <b:panel title="First steps with AngularFaces" look="primary">
                <h2>Requirements</h2>
                <p>You find the requirements <a href="../../version2.1/tutorial/step_99/requirements.jsf">in a dedicated chapter</a>. Cutting a long story short:
                You need Java 6 and JSF 2.2.</p>

        <h2>Template projects</h2>
        <p>Using a template project is always a good approach to learning a new framework. There's a simple demo project on   
            <a target="#" href="https://github.com/stephanrauh/BootsFaces-Examples/tree/master/PanelGrid">my GitHub repository</a>, 
            combining AngularFaces with BootsFaces and PrimeFaces. In most cases that's a good foundation to build on:</p>
        <ul>
            <li>AngularFaces simplifies the JSF programming model und makes it possible to use AngularJS in a JSF application.</li>
            <li>BootsFaces brings the elegant layout of Twitter Bootstrap to the JSF world. Of course you don't need BootsFaces
            to use Bootstrap. But it makes many things simpler, offers more expressive markup language and give you one or two
            dozen components which are optimized both for JSF and Bootstrap.</li>
            <li>For everything else I recommend PrimeFaces. In particular, PrimeFaces offers a wealth of advanced widgets
            that haven't a AngularFaces or BootsFaces counterpart. Nor do we want to offer such widgets: Both AngularFaces and BootsFaces are
            meant to be used with PrimeFaces (version 5.0+). You can safely use all three frameworks together in the same application.
            There's hardly any risk to run into incompatibilities, let alone a maintainance hell.</li> 
            <li>OmniFaces is another good match to AngularFaces and BootsFaces (even though it didn't make it into the template project). A component I'm particularly fond of
            is the <code>CombinedResourceHandler</code>. Both AngularFaces and BootsFaces load many small Javascript and CSS files. The <code>CombinedResourceHandler</code>
            improves page load time considerably by combining these files into a single file, which is loaded much faster. Today, that is: 
            if you use SPDY or HTTP/2, new rules apply. Chances are you shouldn't use <code>CombinedResourceHandler</code> after migrating to HTTP/2.</li>
        </ul>
        <p>In case you don't want to use PrimeFaces or BootsFaces, simply remove the entries from the <code>pom.xml</code>.
        </p>
        <p>
            Another interesting demo showing quite a few advanced features is the <a target="#" href="http://angularfaces.net/showcase2.1/carshop/index.jsf">car dealer demo</a>,
            the sources of which are available on <a target="#"
                href="https://github.com/stephanrauh/AngularFaces/tree/master/AngularFaces_2.0/AngularFaces-2.0-examples">GitHub</a>. There's a caveat:
                I frequently use the project for experiments. Please don't expect the most commendable code. On the plus side, you'll find
                examples how to use a PrimeFaces DataTable or an AngularJS ngTable in an AngularFaces application. Another advanced feature
                is sending AngularJS model data <a href="../../javascript/afSendNGSyncToServer/index.jsf">to the server from an AngularJS controller.</a>
        </p>
        <p>
            In case you're fond of games, there's the <a target="#" href="https://github.com/stephanrauh/AngularTetrisOnBootsFaces">Tetris demo</a>.
            It's a slightly more advances demo of AngularFaces. On the one hand it consists of a lot of Javascript code, on the other 
            hand there's also a server-side database access with JPA. Enjoy the live demo at
            <a target="#" href="http://angularfaces.net/tetris/">http://angularfaces.net/tetris/</a>!
        </p>
        <h2>Let's go!</h2>
        <p>You can grab a precompiled release of AngularFaces from MavenCentral or jCenter. Alternatively, you can build AngularFaces from source.
        By now AngularFaces is mature enough, so I recommend the first option.</p>
        
        <p>In any case you have to add a context parameter to the  <code>web.xml</code>. 
        AngularFaces is a friendly framework: if you forget to set the parameter, AngularFaces reminds you when starting the server.</p>
        <b:tabView>
        <b:tab title="web.xml">
        <b:well>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;context-param>
    &lt;param-name>javax.faces.FACELETS_DECORATORS&lt;/param-name>
    &lt;param-value>
        de.beyondjava.angularFaces.core.tagTransformer.AngularTagDecorator
    &lt;/param-value>
&lt;/context-param>
]]></script>
        </b:well>
        </b:tab>
        <b:tab title="pom.xml">
        <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;dependencies>
  &lt;dependency>
    &lt;groupId>de.beyondjava&lt;/groupId>
    &lt;artifactId>angularFaces-core&lt;/artifactId>
    &lt;version>2.1.3&lt;/version>
  &lt;/dependency>
  &lt;dependency>
    &lt;groupId>com.sun.faces&lt;/groupId>
    &lt;artifactId>jsf-api&lt;/artifactId>
    &lt;version>2.2.10&lt;/version>
    &lt;scope>compile&lt;/scope>
  &lt;/dependency>
  &lt;dependency>
    &lt;groupId>com.sun.faces&lt;/groupId>
    &lt;artifactId>jsf-impl&lt;/artifactId>
    &lt;version>2.2.10&lt;/version>
    &lt;scope>runtime&lt;/scope>
  &lt;/dependency>
&lt;/dependencies>
]]></script>
        </b:well>
        </b:tab>
        <b:tab title=".gradle">
        <b:well>
                <script type="syntaxhighlighter" class="brush: groovy; toolbar: false;first-line: 0">
<![CDATA[
        compile 'de.beyondjava:angularFaces-core:2.1.+'
        compile 'com.sun.faces:jsf-api:2.2.+'
        runtime 'com.sun.faces:jsf-impl:2.2.+'
]]></script>
        </b:well>
        </b:tab>
        </b:tabView>

                
       <h2>Your first AngularFaces program</h2>
        <b:row>
        <b:column span="8">      
        <p>Users of Maven and Gradle are already familiar with Maven's default project layout.</p>

        <p>Please create these folders:</p>
        <ul>
        <li><code>src/main/java</code> Put your Java source code files here.</li>
        <li><code>src/main/resources</code> Files in this folder aren't compiled, but they are included in the class path nonetheless. For instance, the
        language files for the automatic translation feature of AngularFaces belong here.</li>  
        <li><code>src/main/webapps</code>This folder contains the XHTML files and the AngularJS controllers.</li>
        </ul>
        </b:column>
        <b:column span="4">
                       <img src="folderLayout.png" />
        </b:column>
        </b:row>
        
        <p>Our example uses these files:</p>
                
      <b:tabView contentStyle="min-height:420px">
        <b:tab title="index.jsf">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:b="http://bootsfaces.net/ui" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:prime="http://primefaces.org/ui">
<body>
   <container> 
      <panel title="Contact information" look="info"> 
        <h:form>
          <panelGrid colSpans="2,3,7" size="xs"> 
             <prime:inputText value="#{person.firstName}" /> 
             <prime:inputText value="#{person.lastName}" /> 
             <prime:calendar value="#{person.birthdate}" />
          </panelGrid>
        </h:form>
      </panel>
    </container>
  </body>
</html>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="JSF-Bean">
          <b:well>
                <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 0">
                    <![CDATA[
package de.beyondjava.bootsfaces.examples;

import java.util.Date;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

@ViewScoped
@ManagedBean
public class Person {
    
    private String firstName;
    private String lastName;
    private Date birthdate;

    // Getters and setter omitted
    // for the sake of brevity
}
                ]]></script>     
                <p>If you use CDI, please replace @ManagedBean by @Named and make sure you import the new Viewscope <code>javax.faces.view</code>.</p>    
          </b:well>
        </b:tab>
        <b:tab title="main.js (AngularJS controller)">
          <b:well>
            <p>This simple example doesn't need an AngularJS-Controller. But if it had one, it'd look like this:</p>
                <script type="syntaxhighlighter" class="brush: js; toolbar: false;first-line: 0">
                    <![CDATA[
angular.module("AngularTetris", [ "angularfaces", "smart-table" ])
.controller('AngularTetrisController', ['$scope', function($scope) {
   initJSFScope($scope);
   // put your application logic here
}]);   
                ]]></script>            
          </b:well>
        </b:tab>
        <b:tab title="web.xml">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="http://java.sun.com/xml/ns/javaee"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
    id="WebApp_ID" 
    version="3.0">

    <context-param>
        <param-name>javax.faces.FACELETS_DECORATORS</param-name>
        <param-value>
            de.beyondjava.angularFaces.core.tagTransformer.AngularTagDecorator
        </param-value>
    </context-param>
   <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>bootstrap</param-value>
    </context-param>

    <context-param>
        <param-name>BootsFaces_USETHEME</param-name>
        <param-value>true</param-value>
    </context-param>
    <welcome-file-list>
        <welcome-file>index.jsf</welcome-file>
    </welcome-file-list>
</web-app>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="faces-config.xml">
            <b:well>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<faces-config
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"
    version="2.2">
</faces-config>
                ]]></script>
            </b:well>
        </b:tab>
        <b:tab title="preview">
        <img src="preview.png" />
        </b:tab>
        <b:tab title="live demo">
        <iframe style="width:500px;height:400px;" src="http://angularfaces.net/BootsFacesPanelGrid/"></iframe>
        </b:tab>
        <b:tab title="pom.xml" contentStyle="height:700px">
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
<repositories>
    <repository>
        <id>prime-repo</id>
        <name>PrimeFaces Maven Repository</name>
        <url>http://repository.primefaces.org</url>
        <layout>default</layout>
    </repository>
</repositories>
<dependencies>
    <dependency>
        <groupId>net.bootsfaces</groupId>
        <artifactId>bootsfaces</artifactId>
        <version>0.6.5</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>org.primefaces</groupId>
        <artifactId>primefaces</artifactId>
        <version>5.1</version>
        <scope>compile</scope>
    </dependency>
   <dependency>
        <groupId>org.primefaces.themes</groupId>
        <artifactId>bootstrap</artifactId>
        <version>1.0.10</version>
        <scope>runtime</scope>
    </dependency>
   <dependency>
        <groupId>de.beyondjava</groupId>
        <artifactId>angularFaces-core</artifactId>
        <version>2.1.2</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.2.10</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-impl</artifactId>
        <version>2.2.10</version>
        <scope>runtime</scope>
    </dependency>
</dependencies>
               ]]></script>
        </b:tab>
        </b:tabView>
        <h2>Wrapping it up</h2>
        <p>That's it! Your first AngularFaces application is up and running. Granted, it doesn't use AngularJS yet, but it demonstrates several other interesting features of AngularFaces:</p>
        
        <ul>
            <li>The program uses both BootsFaces and PrimeFaces along with AngularFaces. That's the reason why the <code>pom.xml</code> is more verbose than the minimal <code>pom.xml</code> given above.</li>
            
            <li>Labels and error messages are - if you wish so - generated automatically. So the form concentrates on the really interesting information: the three input fields.</li>
            <li>In most cases you can omit the prefixes <code>h:</code> und <code>b:</code>. (Too bad your IDE doesn't know about this...)</li>
        </ul>
        <p>Now it's up to you. Experiment with the program, browse through the other chapters of the tutorial, and most of all:</p>
        <h2>Enjoy!</h2>
        
        <br />
        <br />
        <br />
        <br />
        <br />
                
          <br />
                <br />
            </b:panel>
</ui:fragment>
