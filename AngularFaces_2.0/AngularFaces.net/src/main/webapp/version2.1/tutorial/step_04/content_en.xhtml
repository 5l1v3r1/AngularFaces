<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore">

      <b:panel title="Mustaches" look="primary">
  <h1>Using mustaches in JSF attributes</h1>
  <p>Many JSF attributes can make use of AngularJS mustaches. In that case, they are evaluated on the client, giving
    you a lot of extra flexibility. When the controller is initialized, the initial value of the 
    attribute is set to the corresponding value in the JSF bean. After that, it's an ordinary variable in the
    AngularJS scope.</p>
  <p>For instance, the AngularTetris demo displays either the settings or the current score. The , depending on whether
    the game is being played or not:</p>
<script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter:false;first-line: 1">
<![CDATA[
&lt;h:panelGroup style="&#123;&#123;game.scoreStyle}}">
  &lt;span style="font-weight:bold">Score:&lt;/span>
  ...
&lt;/h:panelGroup>
]]></script>
    <p>In this example, the value of <code>game.scoreStyle</code> is either <code>"display:none"</code> or <code>"display:block"</code>.</p>

  <h3>Beware of rendered="false"</h3>
  <p>It's a bad idea to use rendered="false" to hide a component in an AngularFaces page. AngularFaces uses
    optimized AJAX responses that update the variables of the scope, but nothing else. Hence, if you show or hide
    something on the server side using the rendered attribute, the HTML page is never updated. Better use ng-show,
    ng-hide or - as shown above - either style or styleClass.</p>
      </b:panel>

</ui:fragment>
