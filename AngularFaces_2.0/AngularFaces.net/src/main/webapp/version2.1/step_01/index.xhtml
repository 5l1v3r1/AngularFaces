<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore" xmlns:prime="http://primefaces.org/ui">

<h:body>
  <ui:composition template="/template/fullpage.xhtml">
    <ui:define name="content">
      <b:panel title="Caption" look="primary">
        <h3>Labels and messages</h3>
        <p>One the most annoying and tedious tasks of JSF programming is having to deal with labels and messages. AngularFaces takes the
          scare out of that.</p>
        <p>Mind you, how often have you written something like this?</p>
        <b:tabView active="2">
          <b:tab title="JSF source code">
            <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
            <h:form>
              <prime:panel header="Who are you?" addLabels="false" addMessages="false">
                <prime:panelGrid columns="3">
                  <prime:outputLabel value="last name" for="lastNameID" />
                  <prime:inputText id="lastNameID" value="&#35;{customer.lastName}" label="last name" required="true" />
                  <prime:message for="lastNameID" />
                  <prime:outputLabel value="first name" for="firstNameID" />
                  <prime:inputText id="firstNameID" value="&#35;{customer.firstName}" label="first name" required="true" />
                  <prime:message for="firstNameID" />
                </prime:panelGrid>
                <b:commandButton value="save" look="info" icon="save" />
              </prime:panel>
            </h:form>
]]></script>
            </b:well>
          </b:tab>
          <b:tab title="live demo">
            <h:form>
              <prime:panel header="Who are you?" addLabels="false" addMessages="false">
                <prime:panelGrid columns="3">
                  <prime:outputLabel value="last name" for="lastNameID" />
                  <prime:inputText id="lastNameID" value="#{customer.lastName}" label="last name" required="true" />
                  <prime:message for="lastNameID" />
                  <prime:outputLabel value="first name" for="firstNameID" />
                  <prime:inputText id="firstNameID" value="#{customer.firstName}" label="first name" required="true" />
                  <prime:message for="firstNameID" />
                </prime:panelGrid>
                <b:commandButton value="save" look="info" icon="save" />
              </prime:panel>
            </h:form>
          </b:tab>
          <b:tab title="static screenshot">
            <img src="traditional.png" />
          </b:tab>
        </b:tabView>

        <p>To make the tabular layout visible, the examples on this page deliberately draw lines around the grid cells.</p>
        <p>That's two input fields, but six JSF components. Before the invention of @next and @previous, you also had to add ids to
          assign the label and the message to the input field. In fact, you still have to do so unless you're using PrimeFaces. Among other
          things, the ids make copying and pasting input fields a pain.</p>
        <p>AngularFaces automatically adds the label and the error message to input fields. The label attribute of the input field is
          taken as the label caption:</p>

        <img src="useLabelAttribute.png" />
        <b:well>

          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;prime:panel header="Who are you?">
  &lt;prime:panelGrid columns="3">
    &lt;prime:inputText value="&#35;{customer.lastName}"  label="last name"/>
    &lt;prime:inputText value="&#35;{customer.firstName}" label="first name"/>
  &lt;/prime:panelGrid>
&lt;/prime:panel>
]]></script>
        </b:well>
        <p>In many cases, the label can be derived automatically from the bean attribute name. If you omit the label attribute of the
          input field, AngularFaces assumes the bean attribute name is a camel case version of the label. That's a useful feature for rapid
          prototyping - and even beyond if you see to it to chose expressive variable names. For example, the next example is as simple as
          can be:</p>

        <img src="useCamelCaseValue.png" />

        <b:well>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;prime:panel header="Who are you?">
  &lt;prime:panelGrid columns="3">
    &lt;prime:inputText value="#{customer.lastName}"/>
    &lt;prime:inputText value="#{customer.firstName}"/>
  &lt;/prime:panelGrid>
&lt;/prime:panel>
]]></script>
        </b:well>
        <h3>How to prepare the project</h3>
        <p>As of AngularFaces 2.0, automatic addition of labels and messages requires a little preparation:</p>
        <ul>
          <li>Add two attributes to &lt;h:body&gt;: <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;h:body style="width:1000px" ng-controller="LabelDemoController" ng-app="AngularFacesExamples">
]]></script>
            </b:well>
          </li>
          <li>Add an id to &lt;h:form&gt; or &lt;h:body&gt;. This id has to be named "angular"; <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;h:form id="angular">
]]></script>
            </b:well>
          </li>
          <li>Add the "angular" id to the list of ids executed by the command buttons. If you're using PrimeFaces, simple add
            update="angular": <b:well>

              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
      &lt;prime:commandButton value="save" update="angular" action="..." />
]]></script>
            </b:well>
          </li>
          <li>Add a Javascript file called "main.js" to your project. It activates the client side widgets of AngularFaces - such as
            the AngularFacesMessage: <b:well>
              <script type="syntaxhighlighter" class="brush: js; toolbar: false;first-line: 0">
<![CDATA[
angular.module("AngularFacesExamples", [ "angularfaces" ]);
]]></script>
            </b:well>
          </li>
        </ul>


        <h3>The entire JSF file</h3>
    For the sake of convienience, here's the complete JSF file:
          <b:well>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;f:view xmlns="http://www.w3.org/1999/xhtml"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:prime="http://primefaces.org/ui">
  &lt;h:head>
    &lt;title>car dealer - customer contact information&lt;/title>
  &lt;/h:head>
  &lt;h:body style="width:1000px" ng-controller="LabelDemoController"
    ng-app="AngularFacesExamples">
    &lt;h:form id="angular">
      &lt;prime:panel header="Contact information">
        &lt;prime:panelGrid columns="3">
          &lt;prime:inputText value="&#35;{customer.lastName}" />
          &lt;prime:inputText value="&#35;{customer.firstName}" />
          &lt;prime:inputText value="&#35;{customer.dateOfBirth}" />
          &lt;prime:inputText value="&#35;{customer.emailAddress}" />
          &lt;prime:inputText value="&#35;{customer.iAgreeToTheTermsAndConditions}" />
        &lt;/prime:panelGrid>
        &lt;prime:commandButton value="save" update="angular" action="&#35;{customer.save}" />
      &lt;/prime:panel>
    &lt;/h:form>
  &lt;/h:body>
&lt;/f:view>
]]></script>
        </b:well>
        <h3>Layouting labels and messages</h3>
        <p>AngularFaces 2.0 takes a simplistic approach: labels always precede their input field, and messages always follow the input
          field. That's why the example uses a PrimeFaces panel grid with columns="3": The input field is accompanied by two components that
          are added automatically to the JSF view.</p>
        <p>In a future version, AngularFaces is going to have more flexibility (such as putting labels above and messages below the
          input field).</p>
        <h3>Supressing automatic generation of labels and messages</h3>
        <p>There are three ways to influence the creation of labels and messages:</p>
        <p>First, you can switch off the automatical creation of labels and messages by adding an attribute to &lt;h:body&gt; (or
          &lt;h:body&gt; if you prefer the relaxed syntax of AngularFaces).</p>
        <ul>
          <li>addlabels="false" suppresses the automatical creation of labels for the entire JSF view.</li>
          <li>addmessages="false" suppresses the automatical creation of messages for the entire JSF view.</li>
        </ul>
        <p>Second, you can add the generation of labels and messages for each individual field:</p>
        <ul>
          <li>addlabel="false" suppresses the automatical creation of the label and</li>
          <li>addmessage="false" suppresses the automatical creation of the message.</li>
        </ul>

        <p>The third possibility is to simply provide a label to the field. AngularFaces doesn't add a label if it recognizes there's
          already a label. So all you have to do is to add an outputLabel manually, and to set the for attribute. The same applies to the
          message attribute.</p>
        <p>As of AngularFaces 2.0, this feature does not work with @next and @previous.</p>
        <h3>The &lt;puimessage /&gt;</h3>
        <p>Suppressing message generation also disables the client side bean validation. You can fix it by adding a &lt;puimessage /&gt;
          tag to the &lt;h:message /&gt; tag. &lt;puimessage /&gt; is a client side widget implemented as an AngularJS directive. It
          examines the css class of the associated input field and displays an error message if needed. If there's no error message to
          display, it defaults to the optional "servermessage" attribute. For instance, the HTML code generated by AngularFaces 2.0 to
          display the label "number 2", a numeric input field and the error message looks like so:</p>
        <b:well>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
&lt;tr>
  &lt;td>&lt;label for="myForm:j_idt7">number 2&lt;/label>&lt;/td>
  &lt;td>&lt;input name="myForm:j_idt7" value="65" max="100" type="number" required="" 
                   min="10" ng-model="calculatorBean.number2" />&lt;/td>
  &lt;td>&lt;puimessage af-for="myForm:j_idt7">&lt;/puimessage>&lt;/td>
&lt;/tr></pre>
    <img src="puimessage.png" />
    <p>To display the error message using the PrimeFaces look and feel, add the attribute primefaces="true":</p>  
      <pre class="html">
&lt;tr>
  &lt;puimessage primefaces="true" af-for="myForm:j_idt7">&lt;/puimessage>
&lt;/tr>
]]></script>
        </b:well>
        <img src="primepuimessage.png" />

        <h3>The &lt;puilabel /&gt;</h3>
        <p>Suppressing the automatic generation of labels doesn't break client side bean validation, but it also has a side effect.
          AngularFaces doesn't generate standard JSF or PrimeFaces labels, but &lt;puilabel&gt; that are partially created on the client
          side. They mimick the look and field of the host JSF framework, but they are also colored red if AngularJS considers the input
          field invalid. Standard JSF or PrimeFaces labels change their color only after an AJAX request (unless you activate the Client
          Side Validation feature of PrimeFaces 4+).</p>

        <h3>Example project on GitHub</h3>
    Check out the demo project at <a href="https://github.com/stephanrauh/AngularFaces/tree/master/Tutorial/step_01_labels_and_messages">https://github.com/stephanrauh/AngularFaces/tree/master/Tutorial/step_01_labels_and_messages</a>.
      </b:panel>
    </ui:define>
  </ui:composition>
</h:body>
</html>
