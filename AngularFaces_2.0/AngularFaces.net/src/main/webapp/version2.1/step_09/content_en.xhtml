<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore">

      <b:panel title="JUA" look="primary">
          <h1>Don't do it!</h1>
          <p>AngularFaces simplifies JSF by replacing AJAX by native client-side programming. It works best if you refrain
          from using JSF AJAX. You hardly ever need AJAX. In most cases Javascript does the trick just as well, probably even better.</p>
          <p>But if you insist: Well, yes, since AngularFaces 2.1 you can add JSF AJAX to an AngularFaces application.</p>   


          <h1>Using traditional JSF AJAX with AngularJS</h1>
          <p>Marco Rinck contributed his great JUA library allowing AngularJS applications to survive a JSF request.
          That's not an easy achievement: AngularJS assumes to have to control over the DOM tree. So does JSF.
          Both frameworks get in each other's way, causing all kinds of problems, such as memory leaks
          and cutting the connection of the HTML elements to the AngularJS scope.
          </p>  
          
          <p>In most cases, JUA solves these problems without further ado. When JSF updates the DOM tree, JUA takes care of 
          releasing memory claimed by AngularJS and initializing the updated DOM elements without 
          disturbing older DOM elements. Marco's library frees the memory allocated by AngularJS and
          registers the updated region of your JSF view with AngularJS. You don't have to care about it, just leave it
          to JUA.</p> 
          <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
<h:body id="angular">
	<h:form id="myForm" ng-app="AngularFacesExamples" ng-controller="MyCtrl">
		<h:panelGrid columns="3">
			<input jsf:value="{{calculatorBean.number1}}" />
			<input type="number" jsf:value="{{calculatorBean.number2}}" />
			<input type="number" jsf:value="{{calculatorBean.result}}"  />
			<input type="number" jsf:value="{{calculatorBean.serverSideResult}}" />
   			<h:commandButton value="Add on server (JSF AJAX)"
					action="#{calculatorBean.add}">
					<f:ajax render="myForm" execute="@form" />
			</h:commandButton>
		</h:panelGrid>
	</h:form>
</h:body>
]]></script>
           </b:well>
     
          <p>However, as a rule of thumb, don't use traditional JSF AJAX requests with AngularFaces. 
          As of AngularFaces 2.1, even a great library like JUA has its limitations.</p>
          
          <h2>Re-initializing AngularJS after an AJAX request</h2>
          <p>In rare cases, AngularJS doesn't recover from an AJAX request. In this case you can re-initialize the AngularJS engine by adding
          <code>&lt;ac:updateModelAfterAJAXRequest /&gt;</code>. There's a caveat: most likely this causes client-side memory leaks.</p>
          <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
<![CDATA[
<h:body ng-app="AngularFacesExamples" ng-controller="MyCtrl" id="angular">
    <h:form id="myForm">
        <ac:updateModelAfterAJAXRequest />
        <h:panelGrid columns="3">
            <input type="number" jsf:value="{{calculatorBean.number1}}" />
            <input type="number" jsf:value="{{calculatorBean.number2}}" />
            <input type="number" jsf:value="{{calculatorBean.result}}" />
            <input type="number" jsf:value="{{calculatorBean.serverSideResult}}" />
            <h:commandButton value="Add on server (JSF AJAX)" action="#{calculatorBean.add}">
                <f:ajax render="@form" execute="@form" />
            </h:commandButton>
        </h:panelGrid>
    </h:form>
</h:body>
]]></script>
           </b:well>
          
         
      </b:panel>

</ui:fragment>
