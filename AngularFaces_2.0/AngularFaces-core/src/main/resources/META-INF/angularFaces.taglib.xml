<facelet-taglib version="2.0"
  xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
>

  <namespace>http://beyondjava.net/angularFaces</namespace>

  <tag>
    <description><![CDATA[Secure add a certain - albeit not perfect - level of security to your application.]]></description>
    <tag-name>secure</tag-name>
    <component>
      <component-type>de.beyondjava.Secure</component-type>
      <renderer-type>de.beyondjava.Secure</renderer-type>
    </component>
    <attribute>
      <description><![CDATA[User-defined security checker class (fully qualified class name).]]></description>
      <name>checkedBy</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
  </tag>

  <tag>
    <description><![CDATA[pui:body renders the include statements needed to initialize AngularDart.]]></description>
    <tag-name>body</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiBody.PuiBody</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiBody.PuiBody</renderer-type>
    </component>
  </tag>

  <tag>
    <description><![CDATA[Angular-aware text input field to select a week.]]></description>
    <tag-name>week</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiInput.PuiWeek</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiInput.PuiInput</renderer-type>
    </component>
  </tag>

  <tag>
    <description><![CDATA[Angular-aware text input field.]]></description>
    <tag-name>inputText</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiInput.PuiInput</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiInput.PuiInput</renderer-type>
    </component>
  </tag>

  <tag>
    <description><![CDATA[Angular-aware color picker.]]></description>
    <tag-name>color</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiInput.PuiColor</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiInput.PuiInput</renderer-type>
    </component>
  </tag>

  <tag>
    <description><![CDATA[Angular-aware textarea.]]></description>
    <tag-name>textarea</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiInput.PuiInputarea</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiInput.PuiInputarea</renderer-type>
    </component>
  </tag>

  <tag>
    <description><![CDATA[Angular-aware button.]]></description>
    <tag-name>button</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiButton.PuiButton</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiButton.PuiButton</renderer-type>
    </component>
    <attribute>
      <description><![CDATA[ optional: the name of a Dart function called when the button is clicked. Similar to ng-click (but more natural to PrimeFaces programmers). Note that onClick is also a legal attribute, only it calls a Javascript function instead of a Dart function!]]></description>
      <name>actionListener</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[optional: if set to "true", the button is disabled and doesn't react to being clicked.]]></description>
      <name>disabled</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[optional: if set to "true", the button is disabled and doesn't react to being clicked.]]></description>
      <name>icon</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[optional: the button's icon's position. Legal values: "right" and "left" (=default).]]></description>
      <name>iconPos</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[The button's caption.]]></description>
      <name>value</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
  </tag>

  <tag>
    <description><![CDATA[<pui-grid> makes it a little easier to create simple but decently looking input dialogs. Typically it contains a number of input fields that are automatically aligned to each other. More precisely, <pui-grid> creates a column consisting of three columns. The first column is the label (which is automatically extracted from the component), the second is the components itself and the third column is the field-specific error message. Alternatively, the error message is placed below its field. Likewise, the label can be put above the input field.]]></description>
    <tag-name>grid</tag-name>
    <component>
      <component-type>de.beyondjava.angularFaces.puiGrid.PuiGrid</component-type>
      <renderer-type>de.beyondjava.angularFaces.puiGrid.PuiGrid</renderer-type>
    </component>
    <attribute>
      <description><![CDATA[Do you want to put the error message below or behind the field? Legal values: "below" and "behind". Default value: "below".]]></description>
      <name>errorMessagePosition</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[Do you want to put the label above or in front of the field? Legal values: "above" and "before". Default value: "before".]]></description>
      <name>labelPosition</name>
      <required>false</required>
      <type>java.lang.String</type>
    </attribute>
  </tag>


</facelet-taglib>
