<ui:composition template="template.xhtml" xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:jsf="http://xmlns.jcp.org/jsf"
  xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:ac="http://beyondjava.net/angularFacesCore">
  <h:head />
  <ui:param name="title" value="Car dealer demo"/>
  <ui:param name="controllerFile" value="index.js" />
  <ui:define name="content">
    <ul class="tab" ng-init="tab = 1">
      <li class="tab" ng-class="{active:tab===1}"><a class="tab" ng-click="tab = 1">Looking for a car?</a></li>
      <li class="tab" ng-class="{active:tab===2}"><a class="tab" ng-click="tab = 2">Want to sell your car?</a></li>
      <br />
      <br />
      <div ng-show="tab === 1" style="height: 500px; width: 700px">
        <ui:include src="filter.xhtml"></ui:include>
      </div>
      <div ng-show="tab === 2" style="height: 500px; width: 700px">
        <ui:include src="addCar.xhtml"></ui:include>
      </div>
    </ul>
  </ui:define>
  
  <ui:define name="explanation">
    <h3>What do you see here?</h3>
    <span ng-show="tab === 1">
                <p>The first tab is a pure AngularJS view that communicates with
                the back-end via &lt;ngsync&gt;.</p>
                <p>Brand and type aren't independent fields. Choosing a brand
                limits the list of types. Which type matches which brand is
                calculated on the server. However, this is one of the tasks
                you need client support for: when the user changes the brand,
                AngularJS clears the type. If it doesn't, the back-end logic
                detects the mismatch and sets the brand back to the original
                value (because setBrand is called first and setType is called)
                second).</p>
                </span>
    <span ng-show="tab === 2">
                <p>The second tab is a pure Mojarra or MyFaces view that doesn't
                use &lt;ngsync&gt;. Instead, it uses several AngularJS mustaches.
                </p>
                </span>
  
  </ui:define>
  
</ui:composition>